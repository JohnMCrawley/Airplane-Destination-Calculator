/* 
* MAIN class *
 */
package airplane_program;

public class AirplaneApplicationFrame extends javax.swing.JFrame 
{
    //Global Variables in the class//
        
        //Airplane Infomartion Array
        String[][] airplaneInfo = 
        {
            {"Boeing 747", "Boeing 737", "Boeing 777", "Boeing 787", "Boeing BBJ", "Boeing"},
            {"920", "820", "970", "950", "750", "800"},
            {"13000", "5649", "14300", "16000", "7200", "4500"}
        };
        //Location String + Distance Value Array
         String[][] destinationInfo = 
        {
            {"Sydney", "New York", "Auckland", "London", "Dubai"},
            {"15461", "5112", "18167", "461", "7760", "800"},
        };       
        
        //Plane Moddeling Data Object
        airplaneObject boeing747 = new airplaneObject(airplaneInfo[0][0], Integer.parseInt(airplaneInfo[1][0]), Integer.parseInt(airplaneInfo[2][0]));
        airplaneObject boeing737 = new airplaneObject(airplaneInfo[0][1], Integer.parseInt(airplaneInfo[1][1]), Integer.parseInt(airplaneInfo[2][1]));
        airplaneObject boeing777 = new airplaneObject(airplaneInfo[0][2], Integer.parseInt(airplaneInfo[1][2]), Integer.parseInt(airplaneInfo[2][2]));
        airplaneObject boeing787 = new airplaneObject(airplaneInfo[0][3], Integer.parseInt(airplaneInfo[1][3]), Integer.parseInt(airplaneInfo[2][3]));
        airplaneObject boeingBBJ = new airplaneObject(airplaneInfo[0][4], Integer.parseInt(airplaneInfo[1][4]), Integer.parseInt(airplaneInfo[2][4]));
        airplaneObject boeingC17 = new airplaneObject(airplaneInfo[0][5], Integer.parseInt(airplaneInfo[1][5]), Integer.parseInt(airplaneInfo[2][5]));
        //Destination Models Data Object
        DestinationObject sydney = new DestinationObject(destinationInfo[0][0] , Integer.parseInt(destinationInfo[1][0]));
        DestinationObject newYork = new DestinationObject(destinationInfo[0][1], Integer.parseInt(destinationInfo[1][1]));
        DestinationObject auckland = new DestinationObject(destinationInfo[0][2],Integer.parseInt(destinationInfo[1][2]));
        DestinationObject london = new DestinationObject(destinationInfo[0][3],  Integer.parseInt(destinationInfo[1][3]));
        DestinationObject dubai = new DestinationObject(destinationInfo[0][4],   Integer.parseInt(destinationInfo[1][4]));
 
    /**
     * Creates new form AirplaneApplicationFrame
     */
    public AirplaneApplicationFrame()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        data_selection_panel = new javax.swing.JPanel();
        destination_combo = new javax.swing.JComboBox<>();
        airplane_range_button = new javax.swing.JButton();
        calculate_flight_time_button = new javax.swing.JButton();
        airplane_combo = new javax.swing.JComboBox<>();
        output_panel = new javax.swing.JPanel();
        check_plane_panel = new javax.swing.JPanel();
        airplane_range_title = new javax.swing.JLabel();
        airplane_range_result = new javax.swing.JLabel();
        time_calculation_panel = new javax.swing.JPanel();
        calculate_flight_time_title = new javax.swing.JLabel();
        time_calculation_result = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Airplane Calculator");
        setResizable(false);

        data_selection_panel.setBackground(new java.awt.Color(250, 250, 250));

        destination_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pick your destination!--", "Sydney", "New York", "Auckland", "London", "Dubai" }));
        destination_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destination_comboActionPerformed(evt);
            }
        });

        airplane_range_button.setText("Check Airplane Range");
        airplane_range_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airplane_range_buttonActionPerformed(evt);
            }
        });

        calculate_flight_time_button.setText("Calculate Flight Time");
        calculate_flight_time_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_flight_time_buttonActionPerformed(evt);
            }
        });

        airplane_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Pick your airplane --", "Boeing 747", "Boeing 737", "Boeing 777", "Boeing 787", "Boeing BBJ", "Boeing C17" }));
        airplane_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airplane_comboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout data_selection_panelLayout = new javax.swing.GroupLayout(data_selection_panel);
        data_selection_panel.setLayout(data_selection_panelLayout);
        data_selection_panelLayout.setHorizontalGroup(
            data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(data_selection_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(destination_combo, 0, 254, Short.MAX_VALUE)
                    .addComponent(airplane_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calculate_flight_time_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(airplane_range_button, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                .addContainerGap())
        );
        data_selection_panelLayout.setVerticalGroup(
            data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(data_selection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destination_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airplane_range_button, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(data_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airplane_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calculate_flight_time_button, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        output_panel.setBackground(new java.awt.Color(250, 250, 250));

        check_plane_panel.setBackground(new java.awt.Color(200, 220, 240));

        airplane_range_title.setForeground(new java.awt.Color(0, 0, 0));
        airplane_range_title.setText("Check Airplane Range");

        airplane_range_result.setForeground(new java.awt.Color(0, 0, 0));
        airplane_range_result.setText("Pick, 'destination' and your, 'airplane'");

        javax.swing.GroupLayout check_plane_panelLayout = new javax.swing.GroupLayout(check_plane_panel);
        check_plane_panel.setLayout(check_plane_panelLayout);
        check_plane_panelLayout.setHorizontalGroup(
            check_plane_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(check_plane_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(check_plane_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airplane_range_result)
                    .addComponent(airplane_range_title))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        check_plane_panelLayout.setVerticalGroup(
            check_plane_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(check_plane_panelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(airplane_range_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(airplane_range_result)
                .addGap(0, 46, Short.MAX_VALUE))
        );

        time_calculation_panel.setBackground(new java.awt.Color(200, 220, 240));

        calculate_flight_time_title.setForeground(new java.awt.Color(0, 0, 0));
        calculate_flight_time_title.setText("Calculate Flight Time");

        time_calculation_result.setForeground(new java.awt.Color(0, 0, 0));
        time_calculation_result.setText("Pick your, 'destination' &, 'airplane' ");

        javax.swing.GroupLayout time_calculation_panelLayout = new javax.swing.GroupLayout(time_calculation_panel);
        time_calculation_panel.setLayout(time_calculation_panelLayout);
        time_calculation_panelLayout.setHorizontalGroup(
            time_calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(time_calculation_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(time_calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time_calculation_result)
                    .addComponent(calculate_flight_time_title))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        time_calculation_panelLayout.setVerticalGroup(
            time_calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(time_calculation_panelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(calculate_flight_time_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(time_calculation_result)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout output_panelLayout = new javax.swing.GroupLayout(output_panel);
        output_panel.setLayout(output_panelLayout);
        output_panelLayout.setHorizontalGroup(
            output_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(output_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(check_plane_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(time_calculation_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        output_panelLayout.setVerticalGroup(
            output_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(output_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(output_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(check_plane_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(time_calculation_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(output_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data_selection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(data_selection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(output_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void airplane_range_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airplane_range_buttonActionPerformed
        // Airplane Range Button
        Calcuate_Distance(); 
        
    }//GEN-LAST:event_airplane_range_buttonActionPerformed
        //Airplane Range Button
    private void destination_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destination_comboActionPerformed
        //Destination Combo box
 
    }//GEN-LAST:event_destination_comboActionPerformed
        //Destination Combo Box
    private void calculate_flight_time_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_flight_time_buttonActionPerformed
        // Calculate Flight Time
        Calculate_Flight_Time();
    }//GEN-LAST:event_calculate_flight_time_buttonActionPerformed

    private void airplane_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airplane_comboActionPerformed
        //  Airplane Combo Box
    }//GEN-LAST:event_airplane_comboActionPerformed

    public static void main(String args[]) 
    {//Main method bracket//             
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirplaneApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirplaneApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirplaneApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirplaneApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new AirplaneApplicationFrame().setVisible(true);
            }
        });
        
        
    }//Main method bracket//
    
    //METHOD for caclulating the distance to see if plane is suitable
    public void Calcuate_Distance()
    {
        //METHOD variables
        int range = 0;
        int distance = 0;   
        
       switch (airplane_combo.getSelectedIndex()) 
        {
            case 1:
                //If USER picks Boeing 747, get plane range from Boeing 747 Object
                //and assign it to the range variable
                range += boeing747.plane_range;
                break;
            case 2:
                //If USER picks Boeing 737, get plane range from Boeing 737 Object
                //and assign it to the range variable
                range += boeing737.plane_range;
                break;
            case 3:
                //If USER picks Boeing 777, get plane range from Boeing 777 Object
               //and assign it to the range variable
                range += boeing777.plane_range; 
                break;
            case 4:
                //If USER picks Boeing 787, get plane range from Boeing 787 Object
                //and assign it to the range variable
                range += boeing787.plane_range;
                break;
            case 5:
                //If USER picks Boeing BBJ, get plane range from Boeing BBJ Object
                //and assign it to the range variable
                range += boeingBBJ.plane_range;
                break;
            case 6:
                //If USER picks Boeing C17, get plane range from Boeing C17 Object
                //and assign it to the range variable
                range += boeingC17.plane_range;
                break;
            default:
                break;
        }        
        //Given the distance variable a value
        switch (destination_combo.getSelectedIndex()) 
        {
            case 1:
                //If USER picks Sydney, add Sydney distance value to distance variable
                distance += sydney.distance;
                break;
            case 2:
                //If USER picks New York, add New York distance value to distance variable
                distance += newYork.distance;
                break;
            case 3:
                //If USER picks Auckland, add Auckland distance value to distance variable
                distance += auckland.distance;
                break;
            case 4:
                //If USER picks London, add London distance value to distance variable
                distance += london.distance;
                break;
            case 5:
                //If USER picks Dubai, add Dubai distance value to distance variable
                distance += dubai.distance;
                break;
            default:
                break;
        }
        
        //Print out on the application if the plane is sutiable for flight or not
        if(range > distance)
        {
           airplane_range_result.setText("Plane is suitable");
        }
        else if (range < distance)
        {
            airplane_range_result.setText("Pick another airplane!");
        }
                 
   
    }


    
    //Calculate the flight time METHOD//
    public void Calculate_Flight_Time()
    {
        //Method Variables
        double range = 0;
        double speed = 0;
        double distance = 0;
        
        
        //Plane selector - decides variable//
        switch (airplane_combo.getSelectedIndex()) 
        {
            case 1:
                //If USER picks Boeing 747, get plane range and speed from Boeing 747 Object
                //and assign them to the variable range and speed
                range += boeing747.plane_range;
                speed += boeing747.plane_speed;
                break;
            case 2:
                //If USER picks Boeing 737, get plane range and speed from Boeing 737 Object
                //and assign them to the variable range and speed
                range += boeing737.plane_range;
                speed += boeing737.plane_speed;
                break;
            case 3:
                //If USER picks Boeing 777, get plane range and speed from Boeing 777 Object
                //and assign them to the variable range and speed
                range += boeing777.plane_range;
                speed += boeing777.plane_speed;
                break;
            case 4:
                //If USER picks Boeing 787, get plane range and speed from Boeing 787 Object
                //and assign them to the variable range and speed
                range += boeing787.plane_range;
                speed += boeing787.plane_speed;
                break;
            case 5:
                //If USER picks Boeing BBJ, get plane range and speed from Boeing BBJ Object
                //and assign them to the variable range and speed
                range += boeingBBJ.plane_range;
                speed += boeingBBJ.plane_speed;
                break;
            case 6:
                //If USER picks Boeing C17, get plane range and speed from Boeing C17 Object
                //and assign them to the variable range and speed
                range += boeingC17.plane_range;
                speed += boeingC17.plane_speed;
                break;

            default:
                break;
        }        
        //Given the distance variable a value
        switch (destination_combo.getSelectedIndex()) 
        {
            case 1:
                //If USER picks Sydney, add Sydney distance value to distance variable
                distance += sydney.distance;
                break;
            case 2:
                //If USER picks New York, add New York distance value to distance variable
                distance += newYork.distance;
                break;
            case 3:
                //If USER picks Auckland, add Auckland distance value to distance variable
                distance += auckland.distance;
                break;
            case 4:
                //If USER picks London, add London distance value to distance variable
                distance += london.distance;
                break;
            case 5:
                //If USER picks Dubai, add Dubai distance value to distance variable
                distance += dubai.distance;
                break;
            default:
                break;
        }
         
         
        if(range > distance)
        {
            //Calculating time variables//
        //I've declared the variables here because they wouldn't do their job
        //if I were to add them to the global variables
            double d_hour = (distance / speed);
            int hour = (int) d_hour;

            double d_minute = (distance / speed);
            int d_min = (int) d_minute;
            double round_min = ((10 * d_minute - 10 * d_min) / 10) * 60;
            int minute = (int) round_min;

            //If hour > 0, print out hour variable and, ":hours: after printing it out
            if(hour > 0)
            {
               time_calculation_result.setText(Integer.toString(hour) + ":hours " + Integer.toString(minute) + ":minutes"); 
            }
            //If hour < 1, remove the hours print and only show the minutes
            else if(hour < 1)
            {
                time_calculation_result.setText(Integer.toString(minute) + ":minutes");
            }
            //If minutes < 1, remove the minutes as there isn't any to show
            if(minute < 1)
            {
                 time_calculation_result.setText(Integer.toString(hour) + ":hours "); 
            }
            else
            {
            }

        }
        //If range < distance, plane is not suitable so promt user to pick another plane
        else if (range < distance)
        {
            time_calculation_result.setText("Pick another airplane");
        }
                  
         
    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> airplane_combo;
    private javax.swing.JButton airplane_range_button;
    private javax.swing.JLabel airplane_range_result;
    private javax.swing.JLabel airplane_range_title;
    private javax.swing.JButton calculate_flight_time_button;
    private javax.swing.JLabel calculate_flight_time_title;
    private javax.swing.JPanel check_plane_panel;
    private javax.swing.JPanel data_selection_panel;
    private javax.swing.JComboBox<String> destination_combo;
    private javax.swing.JPanel output_panel;
    private javax.swing.JPanel time_calculation_panel;
    private javax.swing.JLabel time_calculation_result;
    // End of variables declaration//GEN-END:variables
}
